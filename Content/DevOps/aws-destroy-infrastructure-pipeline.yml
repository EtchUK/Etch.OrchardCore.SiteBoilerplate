resources:
  - repo: self

trigger: none

variables:
  TF_LOCATION: "$(System.DefaultWorkingDirectory)/DevOps/terraform/aws"

stages:
  - stage: staging_infrastructure_plan
    displayName: Staging Infrastructure Plan
    jobs:
      - deployment: staging_infrastructure_plan
        displayName: Staging Infrastructure
        environment: "Staging"
        variables:
          - group: "Staging"
        pool:
          vmImage: "windows-latest"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
                  displayName: "Use Terraform"
                  inputs:
                    terraformVersion: 1.4.0
                - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
                  displayName: "Terraform Init"
                  inputs:
                    command: init
                    workingDirectory: "$(TF_LOCATION)"
                    backendType: aws
                    backendServiceAws: "AWS Staging"
                    backendAwsRegion: "$(StateRegion)"
                    backendAwsBucket: "$(StateBucket)"
                    backendAwsKey: "$(TF_VAR_ENV)"
                - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
                  displayName: "Terraform Plan"
                  inputs:
                    command: plan
                    workingDirectory: "$(TF_LOCATION)"
                    providerServiceAws: "AWS Staging"
                    providerAwsRegion: "$(TerraformProviderRegion)"
                    commandOptions: '-destroy -input=false -var "DB_PASSWORD=$(TF_VAR_DB_PASSWORD)"'

  - stage: staging_infrastructure_apply
    dependsOn: staging_infrastructure_plan
    displayName: Staging Infrastructure Apply
    condition: succeeded()
    jobs:
      - deployment: staging_infrastructure_apply
        displayName: Staging Infrastructure Apply
        environment: "Staging Approval"
        variables:
          - group: "Staging"
        pool:
          vmImage: "windows-latest"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
                  displayName: "Use Terraform"
                  inputs:
                    terraformVersion: 1.4.0
                - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
                  displayName: "Terraform Init"
                  inputs:
                    command: init
                    workingDirectory: "$(TF_LOCATION)"
                    backendType: aws
                    backendServiceAws: "AWS Staging"
                    backendAwsRegion: "$(StateRegion)"
                    backendAwsBucket: "$(StateBucket)"
                    backendAwsKey: "$(TF_VAR_ENV)"
                - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
                  displayName: "Terraform Plan"
                  inputs:
                    command: plan
                    workingDirectory: "$(TF_LOCATION)"
                    providerServiceAws: "AWS Staging"
                    providerAwsRegion: "$(TerraformProviderRegion)"
                    commandOptions: '-destroy -input=false -var "DB_PASSWORD=$(TF_VAR_DB_PASSWORD)"'
                - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
                  displayName: "Terraform Destroy"
                  inputs:
                    command: destroy
                    workingDirectory: "$(TF_LOCATION)"
                    providerServiceAws: "AWS Staging"
                    providerAwsRegion: "$(TerraformProviderRegion)"
                    commandOptions: '-auto-approve -input=false -var "DB_PASSWORD=$(TF_VAR_DB_PASSWORD)"'
